_______________________________________________________________________________________________________________________
AKTUALIZOWANIE WERSJI:
_______________________________________________________________________________________________________________________

Aktualizacja PyCharm:
Help -> Check for updates...

Aktualizacja Python:
pipenv --python 3.6
Sprawdzić Pipfile czy jest tam wpisany numer najnowszej wersji. Jeżeli nie to nadpisać ręcznie.

Aktualizacja biblioteki:
pipenv update requests

Pozostałe wnioski:
- Nie instalować ręcznie nowego Pythona i nie odinstalowywać starego (gdy brak pewności).
- W przypadku ręcznego zainstalowania nowego Pythona trzeba dla niego ponownie zainstalować pipenv (pip install pipenv
).
- Należy z PATH wywalić ścieżki do starego Pythona.
- Restart IDE najlepiej robić poprzez jego zamknięcie [X] i ponowne uruchomienie zamiast przez opcję "Invalidate Caches".
- (pipenv --venv) Pokazuje lokalizację virtualnego środowiska.
- Z podanej ścieżki kasujemy katalogi z virtualnymi środowiskami, które nas interesują.
- W IDE (prawy dolny róg) tworze nowy interpreter i wybieram z listy po lewej [Pipenv Enviroment].
- (pipenv shell) służy do tego by komendy z pythona uruchamiać w venv.
- pipenv nigdy nie instaluje/aktualizuje głównych bibliotek, tylko dla projektu w venv.
- Za pomocą IDE -> zakładka Python Packages również można instalować i aktualizować paczki (robi to przez pipenv).
- Pipenv wie, że ma tu instalować paczki osobno (a nie na cały komputer) dzięki plikowi Pipfile.
- Pipfile pojawia się w katalogu z projektem dzięki (pipenv init) albo (pipenv install) albo przez IDE.
- Żeby zbudowało się virtualne środowisko w projekcie również wystarczy na początku samo (pipenv install byleco).
